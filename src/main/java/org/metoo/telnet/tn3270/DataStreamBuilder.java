package org.metoo.telnet.tn3270;

import java.io.ByteArrayOutputStream;
import java.util.List;

public class DataStreamBuilder {
    private static final byte ORDER_SET_BUFFER_ADDRESS = (byte) 0x11;
    private static final byte ORDER_START_FIELD = (byte) 0x1D;
    
    private ScreenBuffer buffer;
    
    public DataStreamBuilder(ScreenBuffer buffer) {
        this.buffer = buffer;
    }
    
    public byte[] build(byte aid) {
        ByteArrayOutputStream stream = new ByteArrayOutputStream();
        
        stream.write(aid);
        
        byte[] cursorAddress = encodeAddress(buffer.getCursorAddress());
        stream.write(cursorAddress[0]);
        stream.write(cursorAddress[1]);
        
        List<InputField> modifiedFields = buffer.getModifiedFields();
        
        for (InputField field : modifiedFields) {
            stream.write(ORDER_SET_BUFFER_ADDRESS);
            
            int fieldAddress = field.getFieldPosition();
            byte[] address = encodeAddress(fieldAddress);
            stream.write(address[0]);
            stream.write(address[1]);
            
            String data = field.getData();
            for (int i = 0; i < data.length(); i++) {
                byte ebcdic = asciiToEbcdic(data.charAt(i));
                stream.write(ebcdic);
            }
        }
        
        return stream.toByteArray();
    }
    
    private byte[] encodeAddress(int address) {
        byte[] result = new byte[2];
        
        int high = (address >> 6) & 0x3F;
        int low = address & 0x3F;
        
        high = translateToBufferAddress(high);
        low = translateToBufferAddress(low);
        
        result[0] = (byte) high;
        result[1] = (byte) low;
        
        return result;
    }
    
    private int translateToBufferAddress(int value) {
        if (value < 0 || value > 0x3F) {
            return 0;
        }
        
        int[] table = {
            0x40, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
            0xC8, 0xC9, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F,
            0x50, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7,
            0xD8, 0xD9, 0x5A, 0x5B, 0x5C, 0x5D, 0x5E, 0x5F,
            0x60, 0x61, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7,
            0xE8, 0xE9, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F,
            0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
            0xF8, 0xF9, 0x7A, 0x7B, 0x7C, 0x7D, 0x7E, 0x7F
        };
        
        return table[value];
    }
    
    private byte asciiToEbcdic(char ascii) {
        int[] table = {
            0x00, 0x01, 0x02, 0x03, 0x37, 0x2D, 0x2E, 0x2F,
            0x16, 0x05, 0x25, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13, 0x3C, 0x3D, 0x32, 0x26,
            0x18, 0x19, 0x3F, 0x27, 0x1C, 0x1D, 0x1E, 0x1F,
            0x40, 0x5A, 0x7F, 0x7B, 0x5B, 0x6C, 0x50, 0x7D,
            0x4D, 0x5D, 0x5C, 0x4E, 0x6B, 0x60, 0x4B, 0x61,
            0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7,
            0xF8, 0xF9, 0x7A, 0x5E, 0x4C, 0x7E, 0x6E, 0x6F,
            0x7C, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7,
            0xC8, 0xC9, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6,
            0xD7, 0xD8, 0xD9, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6,
            0xE7, 0xE8, 0xE9, 0xAD, 0xE0, 0xBD, 0x5F, 0x6D,
            0x79, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87,
            0x88, 0x89, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96,
            0x97, 0x98, 0x99, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6,
            0xA7, 0xA8, 0xA9, 0xC0, 0x4F, 0xD0, 0xA1, 0x07
        };
        
        if (ascii < 128) {
            return (byte) table[ascii];
        }
        return 0x40;
    }
}